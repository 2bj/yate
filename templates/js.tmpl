main

    function stylesheet(data) {

#        %Runtime

        var root = makeRoot(data);
        var a0 = { attrs: {} };

        %Stylesheet

        return applyValue([ root ], '', a0);
    }

# ------------------------------------------------------------------------------------------------------------------- #

stylesheet

    %Block

# ------------------------------------------------------------------------------------------------------------------- #

template

    // %Selector.Key %Mode
    var t%Tid = {
        jpath: j%Selector.Jid,
        body: %Body.Block:function
    };

template_mode [ %Value != '' ]

    #%Value

# ------------------------------------------------------------------------------------------------------------------- #

function_

    // %Name()
    var f%Fid = %Body:function

# ------------------------------------------------------------------------------------------------------------------- #

block:function [ %AsList ]

    function(c%Cid, r%Rid, a%Rid, index, count %parent.Args) {
        %.:function-body
    }

block:function

    function(c%Cid, a%Rid, index, count %parent.Args) {
        %.:function-body

        return r%Rid;
    }

block:function-body

    %parent.Args.defaults()
    %.:prologue

    %.

block

    %Templates

    %Defs

    %JPaths

    %Predicates

    var matcher = %Matcher;

    %Exprs

# ------------------------------------------------------------------------------------------------------------------- #

*:prologue [ %inline() ]

*:prologue [ !%AsList && (%type() == 'array' || %type() == 'nodeset') ]

    var r%Rid = [];

*:prologue [ !%AsList && %type() == 'object' ]

    var r%Rid = {};

*:prologue [ !%AsList && %type() == 'boolean' ]

    var r%Rid = false;

*:prologue [ !%AsList ]

    var r%Rid = '';
    a%Rid || a%Rid = { attrs: {} };

# ------------------------------------------------------------------------------------------------------------------- #

inline_scalar:listitem

    r%{Rid}.push( %. );

inline_scalar:output [ %type() == 'nodeset' && !%AsType ]

    r%Rid = %.;

inline_scalar:output

    r%Rid += %.;

# FIXME: Нужен ли этот шаблон?

inline_scalar

    %Expr

# ------------------------------------------------------------------------------------------------------------------- #

scalar:listitem

    %Body:prologue
    %Body
    r%{Rid}.push( r%Body.Rid );

scalar:output

    %Body

scalar

    %Body

# ------------------------------------------------------------------------------------------------------------------- #

pair:listitem [ %Value.inline() ]

    r%Rid[ %Key ] = %Value;

pair:listitem

    %Value.Body:prologue
    %Value
    r%Rid[ %Key ] = r%Value.Rid;

# ------------------------------------------------------------------------------------------------------------------- #

array:listitem

    %Body
    r{%Rid}.push( r%Body.Rid );

array:output

    %Body

array

    %Body

# ------------------------------------------------------------------------------------------------------------------- #

object:listitem

    %Body
    r%{Rid}.push( r%Body.Rid );

object:output

    %Body

object

    %Body

# ------------------------------------------------------------------------------------------------------------------- #

key

    var k%{Kid}_nodes;
    var k%{Kid}_values = {};
    var k%{Kid}_get = function(key) {
        var value = k%{Kid}_values[key];
        if (!value) {
            var c%Cid = k%{Kid}_nodes[key];
            if (c%Cid) {
                %Body:prologue
                %Body:body
                value = r%Body.Rid;
            }
            if (value) {
                k%{Kid}_values[key] = value;
            }
        }
        return value || [];
    };
    var k%{Kid} = function(key) {
        if (!k%{Kid}_nodes) {
            var nodes = %Nodes;
            k%{Kid}_nodes = {};
            for (var i = 0, l = nodes.length; i < l; i++) {
                var c%Use.Cid = nodes[i];
                var useNodes = %Use;
                for (var j = 0, m = useNodes.length; j < m; j++) {
                    k%{Kid}_nodes[ nodeValue(useNodes[j]) ] = c%Use.Cid;
                }
            }

            k%{Kid} = k%{Kid}_get;
        }

        return k%{Kid}_get(key);
    };

# ------------------------------------------------------------------------------------------------------------------- #

*:yate

    /*
        %yate()
    */

# ------------------------------------------------------------------------------------------------------------------- #

var_ [ %Value.inline() ]

    var v%Vid = %Value;

var_

    %Value:prologue
    %Value:output
    var v%Vid = r%Value.Rid;

# ------------------------------------------------------------------------------------------------------------------- #

if_:listitem [ %Else && %Then.inline() && %Else.inline() ]

    r%{Rid}.push( (%Condition) ? %Then : %Else );

if_:listitem [ %AsListItem && %Else ]

    %Then:prologue
    if (%Condition) {
        %Then:body
    } else {
        %Else:body
    }
    r%{Rid}.push( r%Then.Rid );

if_:listitem [ %AsListItem ]

    if (%Condition) {
        %Then:prologue
        %Then:body
        r%{Rid}.push( r%Then.Rid );
    }

if_:listitem

    %.:output

if_:output [ %Else && %Then.inline() && %Else.inline() ]

    r%Rid += (%Condition) ? %Then : %Else;

if_:output [ %Else ]

    if (%Condition) {
        %Then:body
    } else {
        %Else:body
    }


if_:output

    if (%Condition) {
        %Then:body
    }

# ------------------------------------------------------------------------------------------------------------------- #

*:body [ %inline() && (%type() == 'nodeset' || %type() == 'boolean') && !%AsType ]

    r%parent.Rid = %.;

*:body [ %inline() ]

    r%parent.Rid += %.;

*:body

    %Block


# ------------------------------------------------------------------------------------------------------------------- #

for_:listitem [ %Body.AsList ]

    %.:output

for_:listitem

    %Body:prologue
    %.:output
    r%{Rid}.push( r%Body.Rid );


for_:output

    var items%Cid = %Expr;
    for (var i%Cid = 0, l%Cid = items%{Cid}.length; i%Cid < l%Cid; i%Cid++) {
        var c%Body.Cid = items%Cid[ i%Cid ];
        %Body.Block
    }

# ------------------------------------------------------------------------------------------------------------------- #

apply:listitem [ !%Args.empty() ]

    applyList(%Expr, %Mode, r%Rid, %Args);

apply:listitem

    applyList(%Expr, %Mode, r%Rid);

apply:output [ !%Args.empty() ]

    r%Rid += applyValue(%Expr, %Mode:string, a%Rid);

apply:output

    r%Rid += applyValue(%Expr, %Mode, a%Rid, %Args);

template_mode:string
    '%Value'

# ------------------------------------------------------------------------------------------------------------------- #

attr:listitem

    %.:output

attr:output [ %Expr.inline() ]

    a%{Rid}.attrs['%Name'] %Op %Expr;

attr:output

    %Expr:prologue
    %Expr
    a%{Rid}.attrs['%Name'] %Op r%Expr.Rid;

# ------------------------------------------------------------------------------------------------------------------- #

inline_or
    %Left || %Right

inline_and
    %Left && %Right

inline_not
    !%Left

inline_eq
    %Left %Op %Right

inline_rel
    %Left %Op %Right

inline_add
    %Left %Op %Right

inline_mul
    %Left %Op %Right

inline_unary
    -%Expr

inline_union
    join(%Left, %Right)

inline_complex
    (%Expr)

# ------------------------------------------------------------------------------------------------------------------- #

inline_function [ %Kid !== '' ]
    k%Kid(%Args)

inline_function [ %Fid !== '' ]
    f%Fid(c%Cid, index, count %Args)

inline_function [ %Name == 'true' ]
    true

inline_function [ %Name == 'false' ]
    false

inline_function [ %Name == 'name' ]
    c%{Cid}.name

inline_function [ %Name == 'position' ]
    index

inline_function [ %Name == 'count' ]
    count

inline_function [ %Name == 'slice' ]
    slice(%Args)

# ------------------------------------------------------------------------------------------------------------------- #

inline_var
    v%def.Vid

inline_number
    %Value

string
    %String

jpath_context
    selectContext(j%JPath.Jid, %Context:context)

jpath:context
    %Jid

root:context
    root

jpath
    select(j%Jid, c%Cid)

jpath_predicate
    // %Key
    var p%Pid = function(c%Cid, index, count) {
        return %Expr;
    };

jpath_var
    var j%Jid = %compile(); // %Key

arglist_item
    , v%Vid

arglist_item_default
    v%Vid = v%Vid || %Default;

inline_string
    %Value

cast [ %From == 'nodeset' && (%To == 'scalar' || %To == 'xml') ]
    nodeset2scalar( %Expr )

cast [ %From == 'nodeset' && %To == 'boolean' ]
    nodeset2boolean( %Expr )

cast
    %Expr

string_expr
    %Expr

string_literal
    '%Value'

attrs_close:listitem

    %.:output

attrs_close:output

    if (a%{Rid}.open) { r%Rid += closeAttrs(a%Rid); }

attrs_open:listitem

    %.:output

attrs_open:output

    a%{Rid}.attrs = {
        %Attrs:open
    };
    a%{Rid}.open = true;

xml_attr:open

    '%Name': %Value

quote
    %{Mode}Quote(%Expr)

inline_filter
    grep(%Expr, p%Predicate.Pid)

# ------------------------------------------------------------------------------------------------------------------- #

xml_line:listitem

    r%{Rid}.push( %. );

xml_line:output

    r%Rid += %.;

root

    root

