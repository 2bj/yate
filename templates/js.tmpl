main:

function stylesheet(data) {

    %?Runtime

    var r0 = { buf: [], attrs: {} };
    var c0 = makeRoot(data);

    %Stylesheet

    apply([ c0 ], '', r0);

    return r0.buf.join('');
}

-------------------------------------------------------------------------------
stylesheet:

%Predicates

%Jpaths

%Templates

var matcher = %Matcher;

%?Defs

-------------------------------------------------------------------------------
stylesheet-jpaths-item:

// %Index. %Jpath
[
    %Steps,
    %Absolute,
    %Predicates
]

-------------------------------------------------------------------------------
block:

%?Defs

%?Prologue
%?Exprs
%?Epilogue

-------------------------------------------------------------------------------
blockComplex:
%Body

-------------------------------------------------------------------------------
if_:

if (%Condition) {
    %Then
} else {
    %!Else
}

-------------------------------------------------------------------------------
if_:

if (%Condition) {
    %Then
}

-------------------------------------------------------------------------------
ifInline:                   (%Condition) ? %Then : %Else
-------------------------------------------------------------------------------
template:

// %Tid. match %Jpath.Key : %Mode
var t%Tid = {
    jpath: j%Jpath.Jid,
    body: function (c%Cid, r%Rid, index, count, %!Args) {
        %!Args.defaults()
        %Body
    }
};

-------------------------------------------------------------------------------
template:

// %Tid. match %Jpath.Key : %Mode
var t%Tid = {
    jpath: j%Jpath.Jid,
    body: function (c%Cid, r%Rid, index, count) {
        %Body
    }
};

-------------------------------------------------------------------------------
templateMode:               %!Value
-------------------------------------------------------------------------------
function_:

// %Body.type()
var f%Fid = function(c0, index, count, %!Args) {
    %!Args.defaults()
    var r;
    %Body
};

-------------------------------------------------------------------------------
function_:

// %Body.type()
var f%Fid = function(c0, index, count) {
    var r;
    %Body
};

-------------------------------------------------------------------------------
var_:

var v%Vid = %Value;

-------------------------------------------------------------------------------
varBlock:

var v%Vid;
%Value

-------------------------------------------------------------------------------
varInline:

var r%Value.Rid = [];
%Value
var v%Vid = r%Value.Rid[0];

-------------------------------------------------------------------------------
apply:                      apply(%Expr, '%Mode', r%Rid, %!Args);
-------------------------------------------------------------------------------
apply:                      apply(%Expr, '%Mode', r%Rid);
-------------------------------------------------------------------------------
inlineOr:                   %Left || %Right
-------------------------------------------------------------------------------
inlineAnd:                  %Left && %Right
-------------------------------------------------------------------------------
inlineNot:                  !%Left
-------------------------------------------------------------------------------
inlineEq:                   %Left %Op %Right
-------------------------------------------------------------------------------
inlineRel:                  %Left %Op %Right
-------------------------------------------------------------------------------
inlineAdd:                  %Left %Op %Right
-------------------------------------------------------------------------------
inlineMul:                  %Left %Op %Right
-------------------------------------------------------------------------------
inlineUnary:                -%Expr
-------------------------------------------------------------------------------
inlineUnion:                join(%Left, %Right)
-------------------------------------------------------------------------------
inlineComplex:              (%Expr)
-------------------------------------------------------------------------------
inlineFunction:             f%!Fid(c%Cid, index, count, %!Args)
-------------------------------------------------------------------------------
inlineFunction:             %Name(c%Cid, index, count, %!Args)
-------------------------------------------------------------------------------
inlineFunction:             f%!Fid(c%Cid, index, count)
-------------------------------------------------------------------------------
inlineFunction:             %Name(c%Cid, index, count)
-------------------------------------------------------------------------------
inlineVar:                  v%Vid
-------------------------------------------------------------------------------
inlineNumber:               %Value
-------------------------------------------------------------------------------
string:                     %String
-------------------------------------------------------------------------------
jpath:                      selectContext(j%Jid, %!Context)
-------------------------------------------------------------------------------
jpath:                      select(j%Jid, c%Cid)
-------------------------------------------------------------------------------
predicate:

// %Key
var p%Pid = function(c%Cid, index, count) {
    return %Expr;
};

-------------------------------------------------------------------------------
jpaths_item:

// %Jid. %Key
var j%Jid = {
    steps: %Steps,
    preds: %Predicates,
    abs: %Absolute
};

-------------------------------------------------------------------------------
for_:

var items%Cid = %Expr;
for (var i%Cid = 0, l%Cid = items%{Cid}.length; i%Cid < l%Cid; i%Cid++) {
    var c%Body.Cid = items%Cid[ i%Cid ];
    %Body
}

-------------------------------------------------------------------------------
argListItem:                v%Vid
-------------------------------------------------------------------------------
argListItemDefault:         v%Vid = v%Vid || %Default;
-------------------------------------------------------------------------------
inlineString:               "%Value"
-------------------------------------------------------------------------------
nodeset2scalar:             nodeset2scalar(%Expr)
-------------------------------------------------------------------------------
nodeset2xml:                nodeset2scalar(%Expr)
-------------------------------------------------------------------------------
nodeset2boolean:            nodeset2boolean(%Expr)
-------------------------------------------------------------------------------
scalar2boolean:             %Expr
-------------------------------------------------------------------------------
undef2scalar:               %Expr
-------------------------------------------------------------------------------
xml2scalar:                 %Expr
-------------------------------------------------------------------------------
scalar2xml:                 %Expr
-------------------------------------------------------------------------------
undef2boolean:              %Expr
-------------------------------------------------------------------------------
undef2nodeset:              %Expr
-------------------------------------------------------------------------------
stringExpr:                 %Expr
-------------------------------------------------------------------------------
function_true:              true
-------------------------------------------------------------------------------
function_false:             false
-------------------------------------------------------------------------------
function_name:              c%{Cid}.name
-------------------------------------------------------------------------------
function_position:          index
-------------------------------------------------------------------------------
function_count:             count
-------------------------------------------------------------------------------
function_slice:             slice(%Args)
-------------------------------------------------------------------------------
attr:

r%{Rid}.attrs["%Name"] %Op %Expr;

-------------------------------------------------------------------------------
attrBlock:

var r%Expr.Rid = { buf: [], attrs: {} };
%Expr
r%{Rid}.attrs["%Name"] %Op r%{Expr.Rid}.buf.join("");

-------------------------------------------------------------------------------
closeAttrs:

if (r%{Rid}.open) { closeAttrs(r%Rid); }
-------------------------------------------------------------------------------
quote:                      %{Mode}Quote(%Expr)
-------------------------------------------------------------------------------
key:

var k%{Kid}_nodes;
var k%{Kid}_values = {};
var k%{Kid}_get = function(key) {
    var value = k%{Kid}_values[key];
    if (!value) {
        var c%Cid = k%{Kid}_nodes[key];
        if (c%Cid) {
            %Body
        }
        if (value) {
            k%{Kid}_values[key] = value;
        }
    }
    return value || [];
};
var k%{Kid} = function(key) {
    if (!k%{Kid}_nodes) {
        var nodes = %Nodes;
        k%{Kid}_nodes = {};
        for (var i = 0, l = nodes.length; i < l; i++) {
            var c%Use.Cid = nodes[i];
            var useNodes = %Use;
            for (var j = 0, m = useNodes.length; j < m; j++) {
                k%{Kid}_nodes[ nodeValue(useNodes[j]) ] = c%Use.Cid;
            }
        }

        k%{Kid} = k%{Kid}_get;
    }

    return k%{Kid}_get(key);
};

-------------------------------------------------------------------------------
usekey:                     k%Kid(%Args)
-------------------------------------------------------------------------------
inlineGrep:                 grep(%Expr, p%Predicate.Pid)
-------------------------------------------------------------------------------
inlineIndex:                byIndex(%Expr, %Index)
-------------------------------------------------------------------------------

