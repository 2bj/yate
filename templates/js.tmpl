main:

function stylesheet(data) {

    %?runtime

    var r0 = { buf: [], attrs: {} };
    var c0 = makeRoot(data);

    %stylesheet

    apply([ c0 ], '', r0);

    return r0.buf.join('');
}

-------------------------------------------------------------------------------
stylesheet:

%predicates

%jpaths

%templates

var matcher = %matcher;

%?defs

-------------------------------------------------------------------------------
stylesheet-jpaths-item:

// %index. %jpath
[
    %steps,
    %absolute,
    %predicates
]

-------------------------------------------------------------------------------
block:

%?defs

%?prologue
%?exprs
%?epilogue

-------------------------------------------------------------------------------
blockComplex:
%body

-------------------------------------------------------------------------------
if_:

if (%condition) {
    %then
} else {
    %!else
}

-------------------------------------------------------------------------------
if_:

if (%condition) {
    %then
}

-------------------------------------------------------------------------------
ifInline:                   (%condition) ? %then : %else
-------------------------------------------------------------------------------
template:

// %tid. match %jpath.key : %mode
var t%tid = {
    jpath: j%jpath.jid,
    body: function (c%cid, r%rid, index, count, %!args) {
        %!args.defaults()
        %body
    }
};

-------------------------------------------------------------------------------
template:

// %tid. match %jpath.key : %mode
var t%tid = {
    jpath: j%jpath.jid,
    body: function (c%cid, r%rid, index, count) {
        %body
    }
};

-------------------------------------------------------------------------------
templateMode:               %!value
-------------------------------------------------------------------------------
function_:

// %body.type()
var f%fid = function(c0, index, count, %!args) {
    %!args.defaults()
    var r;
    %body
};

-------------------------------------------------------------------------------
function_:

// %body.type()
var f%fid = function(c0, index, count) {
    var r;
    %body
};

-------------------------------------------------------------------------------
var_:

var v%vid = %value;

-------------------------------------------------------------------------------
varBlock:

var v%vid;
%value

-------------------------------------------------------------------------------
varInline:

var r%value.rid = [];
%value
var v%vid = r%value.rid[0];

-------------------------------------------------------------------------------
apply:                      apply(%expr, '%mode', r%rid, %!args);
-------------------------------------------------------------------------------
apply:                      apply(%expr, '%mode', r%rid);
-------------------------------------------------------------------------------
inlineOr:                   %left || %right
-------------------------------------------------------------------------------
inlineAnd:                  %left && %right
-------------------------------------------------------------------------------
inlineNot:                  !%left
-------------------------------------------------------------------------------
inlineEq:                   %left %op %right
-------------------------------------------------------------------------------
inlineRel:                  %left %op %right
-------------------------------------------------------------------------------
inlineAdd:                  %left %op %right
-------------------------------------------------------------------------------
inlineMul:                  %left %op %right
-------------------------------------------------------------------------------
inlineUnary:                -%expr
-------------------------------------------------------------------------------
inlineUnion:                join(%left, %right)
-------------------------------------------------------------------------------
inlineComplex:              (%expr)
-------------------------------------------------------------------------------
inlineFunction:             f%!fid(c%cid, index, count, %!args)
-------------------------------------------------------------------------------
inlineFunction:             %name(c%cid, index, count, %!args)
-------------------------------------------------------------------------------
inlineFunction:             f%!fid(c%cid, index, count)
-------------------------------------------------------------------------------
inlineFunction:             %name(c%cid, index, count)
-------------------------------------------------------------------------------
inlineVar:                  v%vid
-------------------------------------------------------------------------------
inlineNumber:               %value
-------------------------------------------------------------------------------
string:                     %string
-------------------------------------------------------------------------------
jpath:                      selectContext(j%jid, %!context)
-------------------------------------------------------------------------------
jpath:                      select(j%jid, c%cid)
-------------------------------------------------------------------------------
predicate:

// %key
var p%pid = function(c%cid, index, count) {
    return %expr;
};

-------------------------------------------------------------------------------
jpaths_item:

// %jid. %key
var j%jid = {
    steps: %steps,
    preds: %predicates,
    abs: %absolute
};

-------------------------------------------------------------------------------
for_:

var items%cid = %expr;
for (var i%cid = 0, l%cid = items%{cid}.length; i%cid < l%cid; i%cid++) {
    var c%body.cid = items%cid[ i%cid ];
    %body
}

-------------------------------------------------------------------------------
argListItem:                v%vid
-------------------------------------------------------------------------------
argListItemDefault:         v%vid = v%vid || %default;
-------------------------------------------------------------------------------
inlineString:               "%value"
-------------------------------------------------------------------------------
nodeset2scalar:             nodeset2scalar(%expr)
-------------------------------------------------------------------------------
nodeset2xml:                nodeset2scalar(%expr)
-------------------------------------------------------------------------------
nodeset2boolean:            nodeset2boolean(%expr)
-------------------------------------------------------------------------------
scalar2boolean:             %expr
-------------------------------------------------------------------------------
undef2scalar:               %expr
-------------------------------------------------------------------------------
xml2scalar:                 %expr
-------------------------------------------------------------------------------
scalar2xml:                 %expr
-------------------------------------------------------------------------------
undef2boolean:              %expr
-------------------------------------------------------------------------------
undef2nodeset:              %expr
-------------------------------------------------------------------------------
stringExpr:                 %expr
-------------------------------------------------------------------------------
function_true:              true
-------------------------------------------------------------------------------
function_false:             false
-------------------------------------------------------------------------------
function_name:              c%{cid}.name
-------------------------------------------------------------------------------
function_position:          index
-------------------------------------------------------------------------------
function_count:             count
-------------------------------------------------------------------------------
function_slice:             slice(%args)
-------------------------------------------------------------------------------
attr:

r%{rid}.attrs["%name"] %op %expr;

-------------------------------------------------------------------------------
attrBlock:

var r%expr.rid = { buf: [], attrs: {} };
%expr
r%{rid}.attrs["%name"] %op r%{expr.rid}.buf.join("");

-------------------------------------------------------------------------------
closeAttrs:

if (r%{rid}.open) { closeAttrs(r%rid); }
-------------------------------------------------------------------------------
quote:                      %{mode}Quote(%expr)
-------------------------------------------------------------------------------
key:

var k%{kid}_nodes;
var k%{kid}_values = {};
var k%{kid}_get = function(key) {
    var value = k%{kid}_values[key];
    if (!value) {
        var c%cid = k%{kid}_nodes[key];
        if (c%cid) {
            %body
        }
        if (value) {
            k%{kid}_values[key] = value;
        }
    }
    return value || [];
};
var k%{kid} = function(key) {
    if (!k%{kid}_nodes) {
        var nodes = %nodes;
        k%{kid}_nodes = {};
        for (var i = 0, l = nodes.length; i < l; i++) {
            var c%use.cid = nodes[i];
            var useNodes = %use;
            for (var j = 0, m = useNodes.length; j < m; j++) {
                k%{kid}_nodes[ nodeValue(useNodes[j]) ] = c%use.cid;
            }
        }

        k%{kid} = k%{kid}_get;
    }

    return k%{kid}_get(key);
};

-------------------------------------------------------------------------------
usekey:                     k%kid(%args)
-------------------------------------------------------------------------------
inlineGrep:                 grep(%expr, p%predicate.pid)
-------------------------------------------------------------------------------

