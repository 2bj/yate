// ----------------------------------------------------------------------------------------------------------------- //
// main
// ----------------------------------------------------------------------------------------------------------------- //

main

    function stylesheet(data) {

        %Runtime

        var root = makeRoot(data);
        var a0 = { attrs: {} };

        %Stylesheet

        return applyValue(root, '', a0);
    }



// ----------------------------------------------------------------------------------------------------------------- //
// stylesheet
// ----------------------------------------------------------------------------------------------------------------- //

// На первое время, шаблоны (и соответственно matcher) выводятся только на верхнем уровне.

stylesheet

    %Block#defs
    %Block.Templates#defs

    %Block#matcher



// ----------------------------------------------------------------------------------------------------------------- //
// block and body
// ----------------------------------------------------------------------------------------------------------------- //

body

    %Block

block

    %.#defs

    %Exprs#output

// ----------------------------------------------------------------------------------------------------------------- //

* #prologue [ %inline() ]

* #prologue [ %type() == 'array' || %type() == 'nodeset' ]

    var r%Rid = [];

* #prologue [ %type() == 'boolean' ]

    var r%Rid = false;

* #prologue

    var r%Rid = '';
    var a%Rid = a%Rid || { attrs: {} };



// ----------------------------------------------------------------------------------------------------------------- //
// defs: template, function_, key, var_
// ----------------------------------------------------------------------------------------------------------------- //

template #defs

    // match %Selector#yate %Mode#yate
    var t%Tid = {
        jpath: %Selector#selector_ref,
        body: %.
    };

template

    function(c%Cid, a%Rid, index, count %Args) {
        %Args#defaults
        %Body#template

        return r%Rid;
    }

body #template

    %Block#prologue
    %Block#attrs_close

    %Block

block #attrs_close [ %closes() ]

    if (a%{Rid}.open) { r%Rid += closeAttrs(a%Rid); }




// ----------------------------------------------------------------------------------------------------------------- //

function_ #defs

    // %Name
    var f%Fid = %Body.Block#function

// ----------------------------------------------------------------------------------------------------------------- //

var_ #defs [ %Value.inline() ]

    var v%Vid = %Value;

var_ #defs

    %Value#prologue
    %Value#output
    var v%Vid = r%Value.Rid;

// ----------------------------------------------------------------------------------------------------------------- //

key #defs

    var k%{Kid}_nodes;
    var k%{Kid}_values = {};
    var k%{Kid}_get = function(key) {
        var value = k%{Kid}_values[key];
        if (!value) {
            var c%Cid = k%{Kid}_nodes[key];
            if (c%Cid) {
                %Body.Block#prologue
                %Body.Block
                value = r%Body.Block.Rid;
            }
            if (value) {
                k%{Kid}_values[key] = value;
            }
        }
        return value || [];
    };
    var k%{Kid} = function(key) {
        if (!k%{Kid}_nodes) {
            var nodes = %Nodes;
            k%{Kid}_nodes = {};
            for (var i = 0, l = nodes.length; i < l; i++) {
                var c%Use.Cid = nodes[i];
                var useNodes = %Use;
                for (var j = 0, m = useNodes.length; j < m; j++) {
                    k%{Kid}_nodes[ nodeValue(useNodes[j]) ] = c%Use.Cid;
                }
            }

            k%{Kid} = k%{Kid}_get;
        }

        return k%{Kid}_get(key);
    };



// ----------------------------------------------------------------------------------------------------------------- //
// block expressions
// ----------------------------------------------------------------------------------------------------------------- //

if_ #output [ %Else ]

    if (%Condition) {
        %Then
    } else {
        %Else.Block
    }

if_ #output

    if (%Condition) {
        %Then
    }

// ----------------------------------------------------------------------------------------------------------------- //

for_ #output

    var items%Cid = %Selector;
    for (var i%Cid = 0, l%Cid = items%{Cid}.length; i%Cid < l%Cid; i%Cid++) {
        var c%Body.Cid = items%Cid[ i%Cid ];
        %Body.Block
    }

// ----------------------------------------------------------------------------------------------------------------- //

apply #output [ !%Args.empty() ]

    r%Rid += applyValue(%Expr, %Mode#string, a%Rid);

apply #output

    r%Rid += applyValue(%Expr, %Mode, a%Rid, %Args);

template_mode #string

    '%Value'

// ----------------------------------------------------------------------------------------------------------------- //

xml_attr #open

    '%Name': %Value

xml_line #output

    r%Rid += %.#content;

// ----------------------------------------------------------------------------------------------------------------- //

// FIXME: Закэшировать a0.attrs в отдельную переменную.
attr #output [ %Value.inline() && %Op == '+=' ]
    a%{Rid}.attrs['%Name'] = (a%{Rid}.attrs['%Name'] || '') + %Value;

attr #output [ %Value.inline() ]
    a%{Rid}.attrs['%Name'] %Op %Value;

attr #output

    %Value#prologue
    %Value
    a%{Rid}.attrs['%Name'] %Op r%Value.Rid;

attrs_close #output
    if (a%{Rid}.open) { r%Rid += closeAttrs(a%Rid); }

attrs_open#output

    a%{Rid}.attrs = {
        %Attrs#open
    };
    a%{Rid}.open = true;

// ----------------------------------------------------------------------------------------------------------------- //

scalar#output

    %Block

scalar

    %Block



// ----------------------------------------------------------------------------------------------------------------- //
// Selectors: jpath and root.
// ----------------------------------------------------------------------------------------------------------------- //

root

    root

// Для jpath выводим имя его переменной, для root -- null.

root #selector_ref

    null

jpath #selector_ref

    j%Jid

jpath [ %yate() == '.' ]

    [ c%Cid ]

jpath

    select(j%Jid, c%Cid)

jpath_predicate #defs

    // %Key
    function p%Pid(c%Cid, index, count) {
        return %Expr;
    };

jpath #defs

    var j%Jid = %.#compiled; // %Key

jpath #compiled

    [ %Steps#compiled ]

jpath_nametest #compiled

    0, "%Name"

jpath_dots #compiled

    1, %Length

jpath_predicate #compiled [ %isLocal() ]

    2, p%Pid

jpath_predicate #compiled

    3, %Expr

// FIXME: Переименовать в inline_filter
jpath_filter

    selectContext(j%JPath.Jid, %Expr)



// ----------------------------------------------------------------------------------------------------------------- //

arglist_item
    , v%Vid

arglist_item #defaults
    v%Vid = v%Vid || %Default;



// ----------------------------------------------------------------------------------------------------------------- //
// inline expressions
// ----------------------------------------------------------------------------------------------------------------- //

inline_scalar #output

    r%Rid += %Expr;

inline_scalar

    %Expr

inline_or
    %Left || %Right

inline_and
    %Left && %Right

inline_not
    !%Left

inline_eq
    %Left %Op %Right

inline_rel
    %Left %Op %Right

inline_add
    %Left %Op %Right

inline_mul
    %Left %Op %Right

inline_unary
    -%Expr

inline_union
    (%Left).concat(%Right)

inline_complex
    (%Expr)

// ----------------------------------------------------------------------------------------------------------------- //

inline_function [ %Kid !== '' ]
    k%Kid(%Args)

inline_function [ %Fid !== '' ]
    f%Fid(c%Cid, index, count %Args)

// ----------------------------------------------------------------------------------------------------------------- //

// FIXME: Заменить на inline_function_true и т.д.

inline_function [ %Name == 'true' ]
    true

inline_function [ %Name == 'false' ]
    false

inline_function [ %Name == 'name' ]
    c%{Cid}.name

inline_function [ %Name == 'position' ]
    index

inline_function [ %Name == 'count' ]
    count

inline_function [ %Name == 'slice' ]
    slice(%Args)

// ----------------------------------------------------------------------------------------------------------------- //

inline_var
    v%def.Vid

inline_number
    %Value

inline_string
    %Value

string_expr
    %Expr

string_literal
    '%Value'



// ----------------------------------------------------------------------------------------------------------------- //
// cast and quote
// ----------------------------------------------------------------------------------------------------------------- //

cast [ %From == 'nodeset' && (%To == 'scalar' || %To == 'xml') ]
    nodeset2scalar( %Expr )

cast [ %From == 'nodeset' && %To == 'boolean' ]
    nodeset2boolean( %Expr )

cast
    %Expr

quote
    %{Mode}Quote(%Expr)



// ----------------------------------------------------------------------------------------------------------------- //
// misc
// ----------------------------------------------------------------------------------------------------------------- //

* #yate
    %yate()


// vim: set filetype=javascript:

