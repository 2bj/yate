main

#    function stylesheet(data) {

#        %Runtime

#        var c0 = makeRoot(data);

        %Stylesheet

#        return applyValue([ c0 ], '');
#    }

# ------------------------------------------------------------------------------------------------------------------- #

stylesheet

#    %Predicates

#    %Jpaths

    %Templates

#    var matcher = %Matcher;

#    %Defs

# ------------------------------------------------------------------------------------------------------------------- #

template

    // match %Jpath.Key : %Mode
    var t%Tid = {
        jpath: j%Jpath.Jid,
        body: %Body:function
    };

templateMode
    '%Value'

# ------------------------------------------------------------------------------------------------------------------- #

function_

    // %Name()
    var f%Fid = %Body:function

# ------------------------------------------------------------------------------------------------------------------- #

block

    %Defs

    %Exprs

block:function [ %AsList ]

    function(c%Cid, r%Rid, index, count %Args) {
        %.:function-body
    }

block:function

    function(c%Cid, index, count %Args) {
        %.:function-body

        return r%Rid;
    }

block:function-body

    %Args.defaults()
    %.:prologue

    %.

# ------------------------------------------------------------------------------------------------------------------- #

*:prologue [ %inline() ]

*:prologue [ !%AsList && %type() == 'array' ]

    var r%Rid = [];

*:prologue [ !%AsList && %type() == 'object' ]

    var r%Rid = {};

*:prologue [ !%AsList ]

    var r%Rid = '', a%Rid = { attrs: {} };

# ------------------------------------------------------------------------------------------------------------------- #

inlineScalar:listitem

    r%{Rid}.push( %. );

inlineScalar:output

    r%Rid += %.;

inlineScalar

    %Expr

# ------------------------------------------------------------------------------------------------------------------- #

scalar:listitem

    %Body:prologue
    %Body
    r%{Rid}.push( r%Body.Rid );

scalar:output

    %Body

scalar

    %Body

# ------------------------------------------------------------------------------------------------------------------- #

pair:listitem [ %Value.inline() ]

    r%Rid[ %Key ] = %Value;

pair:listitem

    %Value.Body:prologue
    %Value
    r%Rid[ %Key ] = r%Value.Rid;

# ------------------------------------------------------------------------------------------------------------------- #

array:listitem

    %Body
    r{%Rid}.push( r%Body.Rid );

array:output

    %Body

array

    %Body

# ------------------------------------------------------------------------------------------------------------------- #

object:listitem

    %Body
    r%{Rid}.push( r%Body.Rid );

object:output

    %Body

object

    %Body

# ------------------------------------------------------------------------------------------------------------------- #

key

    var k%{Kid}_nodes;
    var k%{Kid}_values = {};
    var k%{Kid}_get = function(key) {
        var value = k%{Kid}_values[key];
        if (!value) {
            var c%Cid = k%{Kid}_nodes[key];
            if (c%Cid) {
                %Body
            }
            if (value) {
                k%{Kid}_values[key] = value;
            }
        }
        return value || [];
    };
    var k%{Kid} = function(key) {
        if (!k%{Kid}_nodes) {
            var nodes = %Nodes;
            k%{Kid}_nodes = {};
            for (var i = 0, l = nodes.length; i < l; i++) {
                var c%Use.Cid = nodes[i];
                var useNodes = %Use;
                for (var j = 0, m = useNodes.length; j < m; j++) {
                    k%{Kid}_nodes[ nodeValue(useNodes[j]) ] = c%Use.Cid;
                }
            }

            k%{Kid} = k%{Kid}_get;
        }

        return k%{Kid}_get(key);
    };

# ------------------------------------------------------------------------------------------------------------------- #

*:yate

    /*
        %yate()
    */

# ------------------------------------------------------------------------------------------------------------------- #

var_ [ %Value.inline() ]

    var v%Vid = %Value;

var_

    %Value:prologue
    %Value:output
    var v%Vid = r%Value.Rid;

# ------------------------------------------------------------------------------------------------------------------- #

if_:listitem [ %Else && %Then.inline() && %Else.inline() ]

    r%{Rid}.push( (%Condition) ? %Then : %Else );

if_:listitem [ %AsListItem && %Else ]

    %Then:prologue
    if (%Condition) {
        %Then:body
    } else {
        %Else:body
    }
    r%{Rid}.push( r%Then.Rid );

if_:listitem [ %AsListItem ]

    if (%Condition) {
        %Then:prologue
        %Then:body
        r%{Rid}.push( r%Then.Rid );
    }

if_:listitem

    %.:output

if_:output [ %Else && %Then.inline() && %Else.inline() ]

    r%Rid += (%Condition) ? %Then : %Else;

if_:output [ %Else ]

    if (%Condition) {
        %Then:body
    } else {
        %Else:body
    }


if_:output

    if (%Condition) {
        %Then:body
    }

# ------------------------------------------------------------------------------------------------------------------- #

*:body [ %inline() ]

    r%parent.Rid += %.;

*:body

    %.


# ------------------------------------------------------------------------------------------------------------------- #

for_:listitem [ %Body.AsList ]

    %.:output

for_:listitem

    %Body:prologue
    %.:output
    r%{Rid}.push( r%Body.Rid );


for_:output

    var items%Cid = %Expr;
    for (var i%Cid = 0, l%Cid = items%{Cid}.length; i%Cid < l%Cid; i%Cid++) {
        var c%Body.Cid = items%Cid[ i%Cid ];
        %Body
    }

# ------------------------------------------------------------------------------------------------------------------- #

apply:listitem

    applyList(%Expr, %Mode, r%Rid %Args);

apply:output

    r%Rid += applyValue(%Expr, %Mode, a%Rid %Args);

# ------------------------------------------------------------------------------------------------------------------- #

attr:listitem

    %.:output

attr:output [ %Expr.inline() ]

    a%{Rid}.attrs['%Name'] %Op %Expr;

attr:output

    %Expr
    a%{Rid}.attrs['%Name'] %Op r%Expr.Rid;

# ------------------------------------------------------------------------------------------------------------------- #

inlineOr
    %Left || %Right

inlineAnd
    %Left && %Right

inlineNot
    !%Left

inlineEq
    %Left %Op %Right

inlineRel
    %Left %Op %Right

inlineAdd
    %Left %Op %Right

inlineMul
    %Left %Op %Right

inlineUnary
    -%Expr

inlineUnion
    join(%Left, %Right)

inlineComplex
    (%Expr)

inlineFunction [ %Fid && %Args ]
    f%Fid(c%Cid, index, count, %Args)

inlineFunction [ %Args ]
    %Name(c%Cid, index, count, %Args)

inlineFunction [ %Fid ]
    f%Fid(c%Cid, index, count)

inlineFunction
    %Name(c%Cid, index, count)

inlineVar
    v%def.Vid

inlineNumber
    %Value

string
    %String

jpath [ %Context ]
    selectContext(j%Jid, %Context)

jpath
    select(j%Jid, c%Cid)

predicate

    // %Key
    var p%Pid = function(c%Cid, index, count) {
        return %Expr;
    };

jpaths_item ( %Predicates = '[]', %Absolute = '0' )

    // %Jid. %Key
    var j%Jid = {
        steps: %Steps,
        preds: %Predicates,
        abs: %Absolute
    };

argListItem
    , v%Vid

argListItemDefault
    v%Vid = v%Vid || %Default;

inlineString
    %Value

cast [ %From == 'nodeset' && (%To == 'scalar' || %To == 'xml') ]
    nodeset2scalar( %Expr )

cast [ %From == 'nodeset' && %To == 'boolean' ]
    nodeset2boolean( %Expr )

cast
    %Expr

stringExpr
    %Expr

stringLiteral
    '%Value'

function_true
    true

function_false
    false

function_name
    c%{Cid}.name

function_position
    index

function_count
    count

function_slice
    slice(%Args)

closeAttrs:listitem

    %.:output

closeAttrs:output

    if (a%{Rid}.open) { r%Rid += closeAttrs(a%Rid); }

openAttrs:listitem

    %.:output

openAttrs:output

    a%{Rid}.attrs = {
        %Attrs:open
    }
    a%{Rid}.open = true;

xmlAttr:open

    '%Name': %Value

quote
    %{Mode}Quote(%Expr)

usekey
    k%Kid(%Args)

inlineGrep
    grep(%Expr, p%Predicate.Pid)

inlineIndex
    byIndex(%Expr, %Index)

# ------------------------------------------------------------------------------------------------------------------- #

xmlLine:listitem

    r%{Rid}.push( %. );

xmlLine:output

    r%Rid += %.;

